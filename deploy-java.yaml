---
- name: Ensure user exists
  hosts: java-servers
  tasks:
    - name: Check if user exists and create if not
      user:
        name: "{{ user }}"
        group: admin

- name: Install Java
  hosts: java-servers
  tasks:
    - name: Update to latest Yum packages
      ansible.builtin.yum:
        name: '*'
        state: latest
    - name: Install Java version 11
      ansible.builtin.yum:
        name: java-11-openjdk
        state: latest

- name: Build java app
  hosts: localhost
  tasks:
    - name: Build java file with gradle
      shell: ./gradlew
      args:
        chdir: /home/ec2-user/ansible-exercises

- name: Check for currently running Java app and remove old jar file
  hosts: java-servers
  become: True
  become_user: "{{ user }}"
  tasks:
    - name: Find jar file
      find:
        paths: /home/{{ user }}
        patterns: "*.jar"
        file_type: file
      register: find_result
    - debug: msg={{find_result}}

    - name: Get PID of Java running process
      ignore_errors: yes
      shell: "ps -few | grep java | awk '{print $2}'"
      register: running_java_processes
      when: find_result.files != []
    - debug: msg={{running_java_processes}}

    - name: Kill running Java processes
      ignore_errors: yes
      shell: "kill {{ running_java_processes.stdout_lines[0] }}"
      when: running_java)processes.stdout_lines | length > 2

    - name: Remove old jar file
      shell: rm {{find_result.files[0].path}}
      when: find_Result.files != []

- name: Deploy app
  hosts: java-servers
  become: True
  become_user: {{ user }}
  tasks:
    - name: Copy jar file to remote server
      copy:
        src: "{{ project_dir }}/build/libs/{{ jar_name }}"
        dest: /home/{{ user }}
    - name: Start the application
      command:
        chdir: /home/{{ user }}
        cmd: java -jar {{ jar_name }}
      async: 1000
      poll: 0
      register: result
    - debug: msg="{{ result }}"
    - name: Check that app has started and is running
      shell: ps aux | grep java
      register: app_status
    - debug: msg="{{ app_status.stdout_lines }}"
